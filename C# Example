using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Web;

namespace APILaunchConsole
{
    static class Program
    {

        private static readonly string[] UriRfc3986CharsToEscape = { "!", "*", "'", "(", ")" };
        private static string EscapeUriDataStringRfc3986(string value)
        {
            // Start with RFC 2396 escaping by calling the .NET method to do the work.
            // This MAY sometimes exhibit RFC 3986 behavior (according to the documentation).
            // If it does, the escaping we do that follows it will be a no-op since the
            // characters we search for to replace can't possibly exist in the string.
            StringBuilder escaped = new StringBuilder(Uri.EscapeDataString(value));

            // Upgrade the escaping to RFC 3986, if necessary.
            foreach (string s in UriRfc3986CharsToEscape)
                escaped.Replace(s, Uri.HexEscape(s[0]));

            // Return the fully-RFC3986-escaped string.
            return escaped.ToString();
        }

        public static string ToRfc3986EncodedString(this string value)
        {
            return EscapeUriDataStringRfc3986(value);
        }

        public static string ToNormalizedString(this NameValueCollection collection, IList<string> excludedNames = null)
        {
            List<KeyValuePair<string, string>> list = new List<KeyValuePair<string, string>>();

            foreach (string key in collection.AllKeys)
            {
                if (excludedNames != null && excludedNames.Contains(key))
                    continue;

                string value = collection[key] ?? string.Empty;
                list.Add(new KeyValuePair<string, string>(HttpUtility.UrlDecode(key).ToRfc3986EncodedString(),
                    HttpUtility.UrlDecode(value).ToRfc3986EncodedString()));
            }

            StringBuilder normalizedString = new StringBuilder();

            foreach (KeyValuePair<string, string> pair in list)
                normalizedString.Append('&').Append(pair.Key).Append('=').Append(pair.Value);

            return normalizedString.ToString().TrimStart('&');
        }

        static void Main(string[] args)
        {

            NameValueCollection parameters = new NameValueCollection()
            {
                { "launch_url", "" },
                { "user_id", "" },
                { "oauth_consumer_key", "INSERT KEY HERE" },
                { "exam_start", "" },
                { "exam_take", "" },
                { "exam_end", "" },
                { "exam_settings", ""},
                { "fullname", "" },
                { "exam_tag", "" },
                { "oauth_signature_method", "HMAC-SHA1" },
                { "oauth_version", "1.0" },
                { "oauth_timestamp", ((DateTime.UtcNow.Ticks - 621355968000000000) / 10000000).ToString().ToString() },
                { "oauth_nonce", "" }
            };

            string signature_base_string = "POST&" + ("https://{ACCOUNT REGION}5499ws.proctor.io/6521ca945bd84cfc85d2767da06aa7c8").ToRfc3986EncodedString() + "&" + parameters.ToNormalizedString().ToRfc3986EncodedString();

            HMACSHA1 hmacsha1 = new HMACSHA1();
            hmacsha1.Key = Encoding.ASCII.GetBytes("INSERT SECRET HERE");
            byte[] dataBuffer = Encoding.ASCII.GetBytes(signature_base_string);
            byte[] hashBytes = hmacsha1.ComputeHash(dataBuffer);

            // BASE64 ENCODED
            string oauth_signature = Convert.ToBase64String(hashBytes);

            // Add the signature to the params list
            parameters.Add(new NameValueCollection() { { "oauth_signature", oauth_signature } });

            // Build data parameters
            StringBuilder parameterBuilder = new StringBuilder();

            // Check parameters
            if (parameters != null)
            {
                // Iterate over them and encode
                foreach (string paramKey in parameters.Keys)
                {
                    // build it for HTTP transport
                    string value = parameters[paramKey];
                    parameterBuilder.Append("&");
                    parameterBuilder.Append(paramKey);
                    parameterBuilder.Append("=");
                    parameterBuilder.Append(HttpUtility.UrlEncode(value));
                }
            }

            // Convert to a single string
            string parameterString = parameterBuilder.ToString();

            // Slice off the leading ampersand
            parameterString = parameterString.Substring(1);

            HttpWebRequest request = WebRequest.CreateHttp("https://{ACCOUNT REGION}5499ws.proctor.io/6521ca945bd84cfc85d2767da06aa7c8");
            request.ContentType = "application/x-www-form-urlencoded";
            request.Method = "POST";

            byte[] requestData = Encoding.ASCII.GetBytes(parameterString);
            using (Stream requstStream = request.GetRequestStream())
            {
                requstStream.Write(requestData, 0, requestData.Length);
                requstStream.Close();
            }

            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

            using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
            {
                using (Stream stream = response.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(stream, Encoding.UTF8))
                    {
                        string a = reader.ReadToEnd();
                        Console.WriteLine("Result:\n");
                        Console.WriteLine(a);
                        Console.WriteLine("\nDone.");
                        Console.ReadKey();
                    }
                }
            }
        }
    }
}
